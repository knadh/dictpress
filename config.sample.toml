[app]
# Network address for the server to listen on.
address = ":9000"

# Admin dashboard and API credentials.
admin_username = "dictpress"
admin_password = "dictpress_admin_password"

# The website URL to be used on the frontend pages.
# Example: yourdictionary.site.com
root_url = "http://localhost:9000"

# (Optional) URLs to one or more JS/CSS files (ending in .js or .css) to load on the admin UI.
# This may be useful to integrate multi-lingual typing capabilities in admin UI boxes when dealing with different languages.
admin_assets = []

# Enable rendering arbitrary pages from (site_dir/pages/*.html).
# For instance, "about" for site_dir/pages/about.html will be
# rendered on site.com/pages/about where the template is defined
# with the name {{ define "page-about" }}. All template name definitions
# should be "page-*".
#
# This is relevant when starting the app with a site theme (--site param).
enable_pages = true

# Enable API endpoints for accepting public user submissions and corrections.
# All user submissions are queued for the admin to review and only get published
# on approval.
enable_submissions = false

# Available dictionary pairs. [$FromLangName, $ToLangName] pairs from the languages defined below in [lang.*] keys.
dicts = [["english", "italian"], ["italian", "english"]]


[results]
# Default number of entries to return per page when paginated.
default_per_page = 10

# The absolute maximum number of results to return per query in case the
# per_page value above if overwritten from the frontend.
max_per_page = 20

# num_page_nums is the of number of page numbers to generate when
# generating page numbers to be printed (eg: 1, 2 ... 10 ..).
# Only relevant for HTML sites loaded with --site.
num_page_nums = 10


[glossary]
enabled = true
default_per_page = 100
max_per_page = 100
num_page_nums = 10


[db]
host = "localhost"
port = 5432
db = "dbname"
user = "username"
password = "password"


[lang.english]
name = "English"

# The name of the tokenizer used to tokenize search queries.
# This can be either a Postgres supported tsvector regconfig (eg: english|german|finnish etc.)
# or a built-in tokenizer (eg: indicphone)
# tokenizer_type = postgres | custom
tokenizer = "english"
tokenizer_type = "postgres"

[lang.english.types]
noun = "Noun"
adj = "Adjective"
verb = "Verb"
adv = "Adverb"
conj = "Conjugation"

[lang.italian]
tokenizer = "italian"
tokenizer_type = "postgres"

[lang.italian.types]
sost = "Sostantivo"       # Noun
verb = "Verbo"            # Verb
