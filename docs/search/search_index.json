{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>dictpress is a free and open source, single binary webserver application for building and publishing fast, searchable, dictionaries for any language. </p> <p>See the Olam and Alar dictionaries for example.</p> <p></p>"},{"location":"admin/","title":"Admin UI","text":"<p>The admin UI is accessible at <code>http://localhost:9000/admin</code>. Replace the hostname and port with your installation.</p>"},{"location":"data-structure/","title":"Data structure","text":"<p>dictpress is language agnostic and has no concept of language semantics. It stores all data in a Postgres database in just two tables entries and relations. To make a universal dictionary interface possible, it treats all dictionary entries as UTF-8 strings that can be accurately searched with Postgres DB's fulltext capabilities by storing tsvector tokens alongside them. The tokens that encode and make the entries searchable can be anything\u2014simple stemmed words or phonetic hashes like Metaphone.</p> <p>Postgres comes with built-in tokenizers for two dozen languages (\\dFd to see the full list on psql). </p> <ul> <li>There can be any number of languages defined in the dictionary. eg: 'english', 'malayalam', 'kannada' etc.</li> <li>All content, the entry words and their definitions, are stored in the <code>entries</code> table</li> <li>Entry-definition many-to-many relationships are stored in the <code>relations</code> table, represented by <code>from_id</code> (entry word) -&gt; <code>to_id</code> (definition word), where both IDs refer to the <code>entries</code> table.</li> </ul>"},{"location":"data-structure/#database-tables","title":"Database tables","text":""},{"location":"data-structure/#entries","title":"entries","text":"Field Type <code>id</code> <code>SERIAL</code> Automtaically generated numeric ID used internally <code>guid</code> <code>TEXT</code> Automtaically generated unique id (UUID) used in public facing APIs <code>content</code> <code>TEXT</code> Actual language content. Dictionary word or definition entries <code>initial</code> <code>TEXT</code> The first \"alphabet\" of the content. For English, for the word <code>Apple</code>, the initial is <code>A</code> <code>weight</code> <code>INT</code> An optional numeric value to sort search results in ascending order <code>tokens</code> <code>TSVECTOR</code> Fulltext search tokens. For English, Postgres' built-in tokenizer gives <code>to_tsvector('fully conditioned')</code> = <code>'condit':2 'fulli':1</code> <code>types</code> <code>TEXT[]</code> Types of content as defined in the content. Eg <code>{noun, propernoun}</code> <code>tags</code> <code>TEXT[]</code> Optional tags <code>phones</code> <code>TEXT[]</code> Phonetic (pronunciation) descriptions of the content. Eg: <code>{ap(\u0259)l, aapl}</code> for <code>Apple</code> <code>notes</code> <code>TEXT</code> Optional additional textual description of the content. <code>status</code> <code>ENUM</code> <code>enabled</code> (show the entry in search results), <code>disabled</code> (hide from search results), <code>pending</code> (public submission pending moderator review)"},{"location":"data-structure/#relations","title":"relations","text":"Field Type <code>from_id</code> <code>INT</code> ID of the head word or the dictionary entry in the entries table <code>to_id</code> <code>INT</code> ID of the definition content in the entry table <code>types</code> <code>TEXT[]</code> Types defining the definition as defined in the config. Eg <code>{noun, propernoun}</code> <code>weight</code> <code>INT</code> An optional numeric value to order definition results <code>tags</code> <code>TEXT[]</code> Optional tags <code>status</code> <code>ENUM</code> <code>enabled</code> (show the entry in search results), <code>disabled</code> (hide from search results), <code>pending</code> (public submission pending moderator review) <code>notes</code> <code>TEXT</code> Optional additional textual description of the content."},{"location":"import/","title":"Importing data","text":"<p>dictpress comes with a built in CSV to database importer tool. Once dictionary data has been organised into the below described structure, import it by running <code>./dictpress import --file=yourfile.csv</code>.</p> <p>Entries with the same content in the same language are not inserted into the database multiple times, but are instead re-used. For instance, if there are multiple <code>Apple (English)</code> entries, it is inserted once but re-used in multiple relations.</p>"},{"location":"import/#sample-csv-format","title":"Sample CSV format","text":"<pre><code>-,A,Apple,english,Optional note,english,\"\",optional-tag1|tag2,\"\u02c8\u00e6p.\u0259l|aapl\",\"\",\"{\"\"etym\"\": \"\"ml\"\"}\"\n^,\"\",\"round, red or yellow, edible fruit of a small tree\",english,\"\",\"\",\"\",\"\",\"\",noun,\"\"\n^,\"\",\"the tree, cultivated in most temperate regions.\",english,\"\",\"\",\"\",\"\",\"\",noun,\"\"\n^,\"\",\"il pomo.\",italian,\"\",\"\",\"\",\"\",\"\",sost,\"\"\n-,A,Application,english,Optional note,italian,\"\",\"\",\"apl\u026a\u02c8ke\u026a\u0283(\u0259)n\",\"\",\"\"\n^,\"\",\"the act of putting to a special use or purpose\",english,\"\",\"\",\"\",\"\",\"\",noun,\"\"\n^,\"\",\"le applicazione\",italian,\"\",\"\",\"\",\"\",\"\",sost,\"\"\n</code></pre> <p>Every line in the CSV file contains an entry in a given language described in 10 columns. Each entry is either a main entry in the dictionary, or a definition of another entry. This is indicated by the first column in each line. <code>-</code> represents a main entry and all subsequent entries below it marked with <code>^</code> represents its definitions in one or more languages.</p> <p>The above example shows two main English entries, \"Apple\" and \"Application\" with multiple English and Italian definitions below them.</p>"},{"location":"import/#csv-fields","title":"CSV fields","text":"Column Field 0 type <code>-</code> represents a main entry. <code>^</code> under it represents a definition entry. 1 initial The uppercase first character of the entry. Eg: <code>A</code> for Apple. If left empty, it is automatically picked up. 2 content The entry content (word or phrase). 3 language Language of the entry (as defined in the config). 4 notes Optional notes describing the entry. 5 tsvector_language If the language has a built in Postgres fulltext tokenizer, the name of the tokenizer language. For languages that do not have Postgres tokenizers, this should be empty. 6 tsVector_tokens Postgres fulltext search tokens for the entry (Content). If <code>tsvector_language</code> is specified, this field can be left empty as the tokens are automatically created in the database using <code>TO_TSVECTOR($tsvector_language, $content)</code>. For languages without Postgres tokenizers, the tsvector token string should be computed externally and provided here. 7 tags Optional tags describing the entry. Separate multiple tags by <code>\\                                                                                                                                                                                                                                                                                                                                                                             |</code>. 8 phones Optional phonetic notations representing the pronunciations of the entry. Separate multiple phones by <code>\\                                                                                                                                                                                                                                                                                                                                     |</code>. 9 definition-types This should only be set for definition entries that ar marked with <code>Type = ^</code>. One or more parts-of-speech types separated by <code>\\                                                                                                                                                                                                                                                                                                             |</code>. Example <code>noun\\ | verb</code>. 10 meta Otional JSON metadata. Quotes inside JSON are escaped by doubling them. Eg: <code>{\"etym\": \"ml\"} =&gt; {\"\"etym\"\": \"\"ml\"\"}</code>"},{"location":"import/#importing-with-sql","title":"Importing with SQL","text":"<p>Generating SQL for dictionary data and loading that directly into the database can give fine grained control The following is the SQL equivalent of the above CSV. The Postgres database tables schemas are described here.</p> <pre><code>-- If the DB is not empty, to wipe everything and get a clean slate, run:\n-- TRUNCATE TABLE entries RESTART IDENTITY CASCADE; TRUNCATE TABLE relations RESTART IDENTITY CASCADE;\n\n-- Insert head words apple, application (id=1, 2)\nINSERT INTO entries (lang, content, initial, tokens, phones) VALUES\n    ('english', 'Apple', 'A', TO_TSVECTOR('apple'), '{/\u02c8\u00e6p.\u0259l/, aapl}'),\n    ('english', 'Application', 'A', TO_TSVECTOR('application'), '{/apl\u026a\u02c8ke\u026a\u0283(\u0259)n/}');\n\n\n-- Insert English definitions for apple. (id=3, 4, 5)\nINSERT INTO entries (lang, content) VALUES\n    ('english', 'round, red or yellow, edible fruit of a small tree'),\n    ('english', 'the tree, cultivated in most temperate regions.'),\n    ('english', 'anything resembling an apple in size and shape, as a ball, especially a baseball.');\n-- Insert English apple-definition relationships.\nINSERT INTO relations (from_id, to_id, types, weight) VALUES\n    (1, 3, '{noun}', 0),\n    (1, 4, '{noun}', 1),\n    (1, 5, '{noun}', 2);\n\n-- Insert Italian definitions for apple. (id=6, 7)\nINSERT INTO entries (lang, content) VALUES\n    ('italian', 'mela'),\n    ('italian', 'il pomo.');\n-- Insert Italian apple-definition relationships.\nINSERT INTO relations (from_id, to_id, types, weight) VALUES\n    (1, 6, '{noun}', 0),\n    (1, 7, '{noun}', 1);\n\n\n--\n-- Insert English definitions for application. (id=8, 9)\nINSERT INTO entries (lang, content) VALUES\n    ('english', 'the act of putting to a special use or purpose'),\n    ('english', 'the act of requesting.');\n-- Insert English application-definition relationships.\nINSERT INTO relations (from_id, to_id, types, weight) VALUES\n    (2, 3, '{noun}', 8),\n    (2, 4, '{noun}', 9);\n\n-- Insert Italian definitions for application. (id=10, 11, 12)\nINSERT INTO entries (lang, content) VALUES\n    ('italian', 'le applicazione'),\n    ('italian', 'la domanda'),\n    ('italian', 'la richiesta');\n-- Insert Italian application-definition relationships.\nINSERT INTO relations (from_id, to_id, types, weight) VALUES\n    (2, 10, '{noun}', 0),\n    (2, 11, '{noun}', 1),\n    (2, 12, '{noun}', 1);\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>dictpress requires Postgres \u2a7e v10.</p>"},{"location":"installation/#pre-built-binary","title":"Pre-built binary","text":"<ul> <li>Download the latest release and extract the binary.</li> <li><code>./dictpress new-config</code> to generate config.toml. Then, edit the file.</li> <li><code>./dictpress install</code> to install the tables in the Postgres DB.</li> <li>Run <code>./dictpress</code> and visit <code>http://localhost:9000/admin</code>.</li> </ul> <p>See Importing data to populate the dictionary database from CSVs.</p>"},{"location":"installation/#compiling-from-source","title":"Compiling from source","text":"<p>Make sure <code>go</code> is installed on your system.</p> <ol> <li> <p>Download or <code>git clone</code> the latest tagged release or the bleeding edge <code>master</code> branch from the repository. Eg: <code>git clone git@github.com:knadh/dictpress.git</code></p> </li> <li> <p><code>cd</code> into the dictpress directory and run <code>make dist</code>. This compiles the <code>dictpress</code> binary.</p> </li> </ol>"},{"location":"installation/#upgrading","title":"Upgrading","text":"<p>Some releases may require schema changes to the existing database. If a release prompts for an upgrade, run <code>dictpress upgrade</code> to apply the necessary database migrations.</p>"},{"location":"templates/","title":"Templates","text":"<p>dictpress supports publishing dictionary websites with site themes or templates. Examples:</p> <ul> <li>Alar \u2014 Kannada-English dictionary.</li> <li>Olam \u2014 English-Malayalam, Malayalam-Malayalam dictionary.</li> </ul> <p>To setup a dictionary website, use the default theme shipped along with the latest release in the <code>site</code> directory. When running the dictpress binary, pass the path to the directory to it with the <code>--site</code> flag.</p> <pre><code>./dictpress --site=./site\n</code></pre> <p>The site will be served on the port set in the configuration file. eg: <code>http://localhost:9000</code>. To customize the site, edit the template files in the <code>site</code> directory.</p>"},{"location":"api/config/","title":"Config","text":""},{"location":"api/config/#get-apiconfig","title":"GET /api/config","text":"<p>Retrieve the dictionary configuration</p>"},{"location":"api/config/#request","title":"Request","text":"<pre><code>curl http://localhost:9000/api/config\n</code></pre> <p>Response</p> <pre><code>{\n  \"data\": {\n    \"root_url\": \"http://localhost:9000\",\n    \"languages\": {\n      \"english\": {\n        \"name\": \"English\",\n        \"types\": {\n          \"abbr\": \"Abbreviation\",\n          \"adj\": \"Adjective\",\n          \"adv\": \"Adverb\",\n          \"auxv\": \"Auxiliary verb\",\n          \"conj\": \"Conjugation\",\n          \"idm\": \"Idiom\",\n          \"interj\": \"Interjection\",\n          \"noun\": \"Noun\",\n          \"pfx\": \"Prefix\",\n          \"ph\": \"Phrase\",\n          \"phrv\": \"Phrasal verb\",\n          \"prep\": \"Preposition\",\n          \"pron\": \"Pronoun\",\n          \"propn\": \"Proper Noun\",\n          \"sfx\": \"Suffix\",\n          \"verb\": \"Verb\"\n        },\n        \"tokenizer\": \"english\",\n        \"tokenizer_type\": \"postgres\"\n      },\n      \"italian\": {\n        \"name\": \"Italian\",\n        \"types\": {\n          \"adj\": \"Adjective\",\n          \"noun\": \"Noun\",\n          \"verb\": \"Verb\"\n        },\n        \"tokenizer\": \"italian\",\n        \"tokenizer_type\": \"postgres\"\n      },\n      \"kannada\": {\n        \"name\": \"Kannada\",\n        \"types\": {\n          \"adj\": \"Adjective\",\n          \"noun\": \"Noun\",\n          \"verb\": \"Verb\"\n        },\n        \"tokenizer\": \"indicphone\",\n        \"tokenizer_type\": \"custom\"\n      }\n    },\n    \"version\": \"v0.3.0\",\n    \"build\": \"v0.3.0 (#38a1927 2022-06-26T07:56:05+0000)\"\n  }\n}\n</code></pre>"},{"location":"api/entries/","title":"Entries","text":""},{"location":"api/entries/#get-apientriesfromlangtolangsearchquery","title":"GET /api/entries/:fromLang/:toLang/:searchQuery","text":"<p>Search the dictionary and retrieve paginated results. <code>:searchQuery</code> should be URL encoded.</p> <p>This is identication to the public API <code>/api/dictionary/:fromLang/:toLang/:searchQuery</code> except that the public API does not return numerical database <code>id</code>s of entries.</p>"},{"location":"api/entries/#request","title":"Request","text":"<pre><code>curl http://localhost:9000/api/dictionary/english/english/apple\n</code></pre> <p>Response</p> <pre><code>{\n  \"data\": {\n    \"entries\": [\n      {\n        \"id\": 1,\n        \"guid\": \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\",\n        \"weight\": 0,\n        \"initial\": \"A\",\n        \"lang\": \"english\",\n        \"content\": \"Apple\",\n        \"tokens\": \"\",\n        \"tags\": [\n          \"optional-tag1\",\n          \"tag2\"\n        ],\n        \"phones\": [\n          \"\u02c8\u00e6p.\u0259l\",\n          \"aapl\"\n        ],\n        \"notes\": \"Optional note\",\n        \"status\": \"enabled\",\n        \"relations\": [\n          {\n            \"id\": 3,\n            \"guid\": \"61f76f4d-ee87-4efc-b2b2-845125585bcf\",\n            \"weight\": 0,\n            \"initial\": \"R\",\n            \"lang\": \"english\",\n            \"content\": \"round, red or yellow, edible fruit of a small tree\",\n            \"tokens\": \"\",\n            \"tags\": [],\n            \"phones\": [\n              \"\"\n            ],\n            \"notes\": \"\",\n            \"status\": \"enabled\",\n            \"created_at\": \"2022-06-26T08:33:34.842429Z\",\n            \"updated_at\": \"2022-06-26T08:33:34.842429Z\",\n            \"relation\": {\n              \"id\": 1,\n              \"types\": [\n                \"noun\"\n              ],\n              \"tags\": [\n                \"\"\n              ],\n              \"notes\": \"\",\n              \"weight\": 0,\n              \"status\": \"enabled\",\n              \"created_at\": \"2022-06-26T08:33:34.844822Z\",\n              \"updated_at\": \"2022-06-26T08:33:34.844822Z\"\n            }\n          },\n          {\n            \"id\": 4,\n            \"guid\": \"72ee1c06-d3fc-4b5e-8fa7-ad868c12475d\",\n            \"weight\": 1,\n            \"initial\": \"T\",\n            \"lang\": \"english\",\n            \"content\": \"the tree, cultivated in most temperate regions.\",\n            \"tokens\": \"\",\n            \"tags\": [],\n            \"phones\": [\n              \"\"\n            ],\n            \"notes\": \"\",\n            \"status\": \"enabled\",\n            \"created_at\": \"2022-06-26T08:33:34.842429Z\",\n            \"updated_at\": \"2022-06-26T08:33:34.842429Z\",\n            \"relation\": {\n              \"id\": 2,\n              \"types\": [\n                \"noun\"\n              ],\n              \"tags\": [\n                \"\"\n              ],\n              \"notes\": \"\",\n              \"weight\": 1,\n              \"status\": \"enabled\",\n              \"created_at\": \"2022-06-26T08:33:34.844822Z\",\n              \"updated_at\": \"2022-06-26T08:33:34.844822Z\"\n            }\n          },\n          {\n            \"id\": 5,\n            \"guid\": \"653fc521-f917-4049-99fc-5281b3e2e300\",\n            \"weight\": 2,\n            \"initial\": \"I\",\n            \"lang\": \"italian\",\n            \"content\": \"il pomo.\",\n            \"tokens\": \"\",\n            \"tags\": [],\n            \"phones\": [\n              \"\"\n            ],\n            \"notes\": \"\",\n            \"status\": \"enabled\",\n            \"created_at\": \"2022-06-26T08:33:34.842429Z\",\n            \"updated_at\": \"2022-06-26T08:33:34.842429Z\",\n            \"relation\": {\n              \"id\": 3,\n              \"types\": [\n                \"noun\"\n              ],\n              \"tags\": [\n                \"\"\n              ],\n              \"notes\": \"\",\n              \"weight\": 2,\n              \"status\": \"enabled\",\n              \"created_at\": \"2022-06-26T08:33:34.844822Z\",\n              \"updated_at\": \"2022-06-26T08:33:34.844822Z\"\n            }\n          }\n        ],\n        \"created_at\": \"2022-06-26T08:33:34.83976Z\",\n        \"updated_at\": \"2022-06-26T08:33:34.83976Z\"\n      }\n    ],\n    \"page\": 1,\n    \"per_page\": 10,\n    \"total_pages\": 0,\n    \"total\": 1\n  }\n}\n</code></pre>"},{"location":"api/entries/#query-params","title":"Query params","text":"Param Type <code>type</code> <code>string</code> Filter results by the given type. eg: <code>noun</code>. <code>tag</code> <code>string</code> Filter results by the given tag. eg: <code>my-tag</code>. <code>per_page</code> <code>int</code> Number of results to return per page (query) <code>page</code> <code>int</code> Page number for paginated results."},{"location":"api/entries/#get-apientriesid","title":"GET /api/entries/:id","text":"<p>Retrieve a single entry by its database ID.</p>"},{"location":"api/entries/#request_1","title":"Request","text":"<pre><code>curl -u username:password http://localhost:9000/api/entries/1\n</code></pre> <p>Response <pre><code>{\n  \"data\": {\n    \"id\": 1,\n    \"guid\": \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\",\n    \"weight\": 0,\n    \"initial\": \"A\",\n    \"lang\": \"english\",\n    \"content\": \"Apple\",\n    \"tokens\": \"\",\n    \"tags\": [\n      \"optional-tag1\",\n      \"tag2\"\n    ],\n    \"phones\": [\n      \"\u02c8\u00e6p.\u0259l\",\n      \"aapl\"\n    ],\n    \"notes\": \"Optional note\",\n    \"status\": \"enabled\",\n    \"relations\": [\n      {\n        \"id\": 3,\n        \"guid\": \"61f76f4d-ee87-4efc-b2b2-845125585bcf\",\n        \"weight\": 0,\n        \"initial\": \"R\",\n        \"lang\": \"english\",\n        \"content\": \"round, red or yellow, edible fruit of a small tree\",\n        \"tokens\": \"\",\n        \"tags\": [],\n        \"phones\": [\n          \"\"\n        ],\n        \"notes\": \"\",\n        \"status\": \"enabled\",\n        \"created_at\": \"2022-06-26T08:33:34.842429Z\",\n        \"updated_at\": \"2022-06-26T08:33:34.842429Z\",\n        \"relation\": {\n          \"id\": 1,\n          \"types\": [\n            \"noun\"\n          ],\n          \"tags\": [\n            \"\"\n          ],\n          \"notes\": \"\",\n          \"weight\": 0,\n          \"status\": \"enabled\",\n          \"created_at\": \"2022-06-26T08:33:34.844822Z\",\n          \"updated_at\": \"2022-06-26T08:33:34.844822Z\"\n        }\n      },\n      {\n        \"id\": 4,\n        \"guid\": \"72ee1c06-d3fc-4b5e-8fa7-ad868c12475d\",\n        \"weight\": 1,\n        \"initial\": \"T\",\n        \"lang\": \"english\",\n        \"content\": \"the tree, cultivated in most temperate regions.\",\n        \"tokens\": \"\",\n        \"tags\": [],\n        \"phones\": [\n          \"\"\n        ],\n        \"notes\": \"\",\n        \"status\": \"enabled\",\n        \"created_at\": \"2022-06-26T08:33:34.842429Z\",\n        \"updated_at\": \"2022-06-26T08:33:34.842429Z\",\n        \"relation\": {\n          \"id\": 2,\n          \"types\": [\n            \"noun\"\n          ],\n          \"tags\": [\n            \"\"\n          ],\n          \"notes\": \"\",\n          \"weight\": 1,\n          \"status\": \"enabled\",\n          \"created_at\": \"2022-06-26T08:33:34.844822Z\",\n          \"updated_at\": \"2022-06-26T08:33:34.844822Z\"\n        }\n      },\n      {\n        \"id\": 5,\n        \"guid\": \"653fc521-f917-4049-99fc-5281b3e2e300\",\n        \"weight\": 2,\n        \"initial\": \"I\",\n        \"lang\": \"italian\",\n        \"content\": \"il pomo.\",\n        \"tokens\": \"\",\n        \"tags\": [],\n        \"phones\": [\n          \"\"\n        ],\n        \"notes\": \"\",\n        \"status\": \"enabled\",\n        \"created_at\": \"2022-06-26T08:33:34.842429Z\",\n        \"updated_at\": \"2022-06-26T08:33:34.842429Z\",\n        \"relation\": {\n          \"id\": 3,\n          \"types\": [\n            \"noun\"\n          ],\n          \"tags\": [\n            \"\"\n          ],\n          \"notes\": \"\",\n          \"weight\": 2,\n          \"status\": \"enabled\",\n          \"created_at\": \"2022-06-26T08:33:34.844822Z\",\n          \"updated_at\": \"2022-06-26T08:33:34.844822Z\"\n        }\n      }\n    ],\n    \"created_at\": \"2022-06-26T08:33:34.83976Z\",\n    \"updated_at\": \"2022-06-26T08:33:34.83976Z\"\n  }\n}\n</code></pre></p>"},{"location":"api/entries/#get-apientriesidparents","title":"GET /api/entries/:id/parents","text":"<p>Retrieve all parent entries of a definition entry.</p>"},{"location":"api/entries/#request_2","title":"Request","text":"<pre><code>curl -u username:password http://localhost:9000/api/entries/3/parents\n</code></pre> <p>Response <pre><code>{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"guid\": \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\",\n      \"weight\": 0,\n      \"initial\": \"A\",\n      \"lang\": \"english\",\n      \"content\": \"Apple\",\n      \"tokens\": \"\",\n      \"tags\": [\n        \"optional-tag1\",\n        \"tag2\"\n      ],\n      \"phones\": [\n        \"\u02c8\u00e6p.\u0259l\",\n        \"aapl\"\n      ],\n      \"notes\": \"Optional note\",\n      \"status\": \"enabled\",\n      \"created_at\": \"2022-06-26T08:33:34.83976Z\",\n      \"updated_at\": \"2022-06-26T08:33:34.83976Z\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/entries/#post-apientries","title":"POST /api/entries","text":"<p>Create a new entry in the database. This can be a main entry or a definition entry which can be added to another main entry later.</p>"},{"location":"api/entries/#request_3","title":"Request","text":"<pre><code>curl -u username:password 'http://localhost:9000/api/entries' -X POST \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    --data-binary @- &lt;&lt; EOF\n    {\n        \"content\": \"Apple\",\n        \"initial\": \"A\",\n        \"lang\": \"english\",\n        \"phones\": [\"aapl\"],\n        \"tags\": [\"my-tag\"],\n        \"tokens\": \"my-tag\",\n        \"notes\": \"Optional notes\",\n        \"weight\": 2,\n        \"status\": \"enabled\"\n    }\nEOF\n</code></pre> <p>Response <pre><code>{\n  \"data\": {\n    \"id\": 8,\n    \"guid\": \"fa19911a-06a8-424b-8ca3-256e5511cd1f\",\n    \"weight\": 2,\n    \"initial\": \"A\",\n    \"lang\": \"english\",\n    \"content\": \"Apple\",\n    \"tokens\": \"\",\n    \"tags\": [\n      \"my-tag\"\n    ],\n    \"phones\": [\n      \"aapl\"\n    ],\n    \"notes\": \"Optional notes\",\n    \"status\": \"enabled\",\n    \"created_at\": \"2022-06-26T09:45:21.011192Z\",\n    \"updated_at\": \"2022-06-26T09:45:21.011192Z\"\n  }\n}\n</code></pre></p>"},{"location":"api/entries/#params","title":"Params","text":"Param Type <code>content</code> <code>string</code> The entry content (word or phrase). <code>initial</code> <code>string</code> The uppercase first character of the entry. Eg: <code>A</code> for Apple. If left empty, it is automatically picked up. <code>lang</code> <code>string</code> Language of the entry as defined in the config. <code>phones</code> <code>[]string</code> Optional phonetic notations representing the pronunciations of the entry. <code>tokens</code> <code>string</code> Postgres fulltext search tokens for the entry (content). If this is left empty and the language config has <code>tokenizer_type</code> set as <code>Postgres</code>, the tokens are automatically created in the database using <code>TO_TSVECTOR($tsvector_language, $content)</code>. For languages without Postgres tokenizers, the tsvector token string should be computed externally and provided here. <code>tags</code> <code>[]string</code> Optional tags describing the entry. <code>notes</code> <code>string</code> Optional notes describing the entry. <code>weight</code> <code>int</code> Optional numerical weight to order the entry in the glossary and search results. If left empty, it is automatically computed as the last entry by the initial in ascending order. <code>status</code> <code>string</code> <code>enabled</code> = Visible in public search and APIs.<code>pending</code> = Pending moderation in the admin UI.<code>disabled</code> = Hidden from public search and APIs."},{"location":"api/entries/#put-apientriesid","title":"PUT /api/entries/:id","text":"<p>Update an entry.</p>"},{"location":"api/entries/#request_4","title":"Request","text":"<pre><code>curl -u username:password 'http://localhost:9000/api/entries/8' -X PUT \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    --data-binary @- &lt;&lt; EOF\n    {\n        \"content\": \"Apple\",\n        \"initial\": \"A\",\n        \"lang\": \"english\",\n        \"phones\": [\"aapl\"],\n        \"tags\": [\"my-tag\"],\n        \"tokens\": \"my-tag\",\n        \"notes\": \"Optional notes\",\n        \"weight\": 2,\n        \"status\": \"enabled\"\n    }\nEOF\n</code></pre> <p>Response <pre><code>{\n  \"data\": {\n    \"id\": 8,\n    \"guid\": \"fa19911a-06a8-424b-8ca3-256e5511cd1f\",\n    \"weight\": 2,\n    \"initial\": \"A\",\n    \"lang\": \"english\",\n    \"content\": \"Apple\",\n    \"tokens\": \"\",\n    \"tags\": [\n      \"my-tag\"\n    ],\n    \"phones\": [\n      \"aapl\"\n    ],\n    \"notes\": \"Optional notes\",\n    \"status\": \"enabled\",\n    \"created_at\": \"2022-06-26T09:45:21.011192Z\",\n    \"updated_at\": \"2022-06-26T09:45:21.011192Z\"\n  }\n}\n</code></pre></p>"},{"location":"api/entries/#params_1","title":"Params","text":"Param Type <code>content</code> <code>string</code> The entry content (word or phrase). <code>initial</code> <code>string</code> The uppercase first character of the entry. Eg: <code>A</code> for Apple. If left empty, it is automatically picked up. <code>lang</code> <code>string</code> Language of the entry as defined in the config. <code>phones</code> <code>[]string</code> Optional phonetic notations representing the pronunciations of the entry. <code>tokens</code> <code>string</code> Postgres fulltext search tokens for the entry (content). If this is left empty and the language config has <code>tokenizer_type</code> set as <code>Postgres</code>, the tokens are automatically created in the database using <code>TO_TSVECTOR($TSVectorLanguage, $content)</code>. For languages without Postgres tokenizers, the TSVectorToken strings should be computed externally and added here. <code>tags</code> <code>[]string</code> Optional tags describing the entry. <code>notes</code> <code>string</code> Optional notes describing the entry. <code>weight</code> <code>int</code> Optional numerical weight to order the entry in the glossary and search results. <code>status</code> <code>string</code> <code>enabled</code> = Visible in public search and APIs.<code>pending</code> = Pending moderation in the admin UI.<code>disabled</code> = Hidden from public search and APIs."},{"location":"api/entries/#delete-apientriesid","title":"DELETE /api/entries/:id","text":"<p>Delete an entry. If this is a main entry, its definition entries are not removed, but merely unlinked from the <code>relations</code> table.</p>"},{"location":"api/entries/#request_5","title":"Request","text":"<pre><code>curl -u username:password 'http://localhost:9000/api/entries/1' -X DELETE\n</code></pre> <p>Response <pre><code>{\n    \"data\": true\n}\n</code></pre></p>"},{"location":"api/intro-private/","title":"Introduction","text":"<p>Private APIs require HTTP BasicAuth authentication with the username and password defined in the config file.</p> <p>Example:</p> <pre><code>curl -u username:password http://localhost:9000/api/stats\n</code></pre>"},{"location":"api/intro/","title":"Intro","text":"<p>Public APIs do not require authentication.</p>"},{"location":"api/relations/","title":"Relations","text":""},{"location":"api/relations/#post-apientriesfromidrelationstoid","title":"POST /api/entries/:fromID/relations/:toID","text":"<p>Adds a relation from an entry to another entry, making <code>fromID</code> entry the main entry and <code>toID</code> entry its definition.</p>"},{"location":"api/relations/#request","title":"Request","text":"<pre><code>curl -u username:password 'http://localhost:9000/api/entries/1/relations/3' -X POST \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    --data-binary @- &lt;&lt; EOF\n    {\n        \"types\": [\"noun\"],\n        \"tags\": [\"my-tag\"],\n        \"notes\": \"Optional notes\",\n        \"weight\": 2,\n        \"status\": \"enabled\"\n    }\nEOF\n</code></pre> <p>Response <pre><code>{\n    \"data\": true\n}\n</code></pre></p>"},{"location":"api/relations/#params","title":"Params","text":"Param Type <code>types</code> <code>[]string</code> One or more parts-of-speech types that describe the definition's (toID) relationship with the main entry. Example <code>noun\\|verb</code>. <code>tags</code> <code>[]string</code> Optional tags describing the relationship (definition). <code>notes</code> <code>string</code> Optional notes describing the relationship (definition). <code>weight</code> <code>int</code> Optional numerical weight to order the definition. If left empty, the definition is added to the end of any existing definitions. <code>status</code> <code>string</code> <code>enabled</code> = Visible in public search and APIs.<code>pending</code> = Pending moderation in the admin UI.<code>disabled</code> = Hidden from public search and APIs."},{"location":"api/relations/#put-apientriesidrelationsrelationid","title":"PUT /api/entries/:id/relations/:relationID","text":"<p>Updates the properties of a relation between a main entry and a definition entry. <code>:relationID</code> is the ID of the relation row in the <code>relations</code> table. This is available in the <code>GET /entries/:id</code> API for all relations of an entry.</p>"},{"location":"api/relations/#request_1","title":"Request","text":"<pre><code>curl -u username:password 'http://localhost:9000/api/entries/1/relations/:relationID' -X PUT \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    --data-binary @- &lt;&lt; EOF\n    {\n        \"types\": [\"noun\"],\n        \"tags\": [\"my-tag\"],\n        \"notes\": \"Optional notes\",\n        \"weight\": 2,\n        \"status\": \"enabled\"\n    }\nEOF\n</code></pre> <p>Response <pre><code>{\n    \"data\": true\n}\n</code></pre></p>"},{"location":"api/relations/#params_1","title":"Params","text":"Param Type <code>types</code> <code>[]string</code> One or more parts-of-speech types that describe the definition's (toID) relationship with the main entry. Example <code>noun\\|verb</code>. <code>tags</code> <code>[]string</code> Optional tags describing the relationship (definition). <code>notes</code> <code>string</code> Optional notes describing the relationship (definition). <code>weight</code> <code>int</code> Optional numerical weight to order the definition. If left empty, the definition is added to the end of any existing definitions. <code>status</code> <code>string</code> <code>enabled</code> = Visible in public search and APIs.<code>pending</code> = Pending moderation in the admin UI.<code>disabled</code> = Hidden from public search and APIs."},{"location":"api/relations/#put-apientriesidrelationsweghts","title":"PUT /api/entries/:id/relations/weghts","text":"<p>Re-order the relations (definition entries) of a main entry</p>"},{"location":"api/relations/#request_2","title":"Request","text":"<pre><code>curl -u username:password 'http://localhost:9000/api/entries/1/relations/weights' -X PUT \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    --data-raw '[3, 4, 5]'\n</code></pre> <p>Response <pre><code>{\n    \"data\": true\n}\n</code></pre></p>"},{"location":"api/relations/#params_2","title":"Params","text":"<p>Raw list of relation IDs in the desired order.</p>"},{"location":"api/relations/#delete-apientriesfromidrelationstoid","title":"DELETE /api/entries/:fromID/relations/:toID","text":"<p>Delete a relation between two entries. This removes the <code>:toID</code> as a definition from the <code>:fromID</code> main entry.</p>"},{"location":"api/relations/#request_3","title":"Request","text":"<pre><code>curl -u username:password 'http://localhost:9000/api/entries/1/relations/3' -X DELETE\n</code></pre> <p>Response <pre><code>{\n    \"data\": true\n}\n</code></pre></p>"},{"location":"api/search/","title":"Search","text":""},{"location":"api/search/#get-apidictionaryfromlangtolangsearchwords","title":"GET /api/dictionary/:fromLang/:toLang/:searchWords","text":"<p>Search the dictionary and retrieve paginated results. <code>:searchQuery</code> should be URL encoded.</p>"},{"location":"api/search/#request","title":"Request","text":"<pre><code>curl http://localhost:9000/api/dictionary/english/english/apple\n</code></pre> <p>Response</p> <pre><code>{\n  \"data\": {\n    \"entries\": [\n      {\n        \"guid\": \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\",\n        \"weight\": 0,\n        \"initial\": \"A\",\n        \"lang\": \"english\",\n        \"content\": \"Apple\",\n        \"tokens\": \"\",\n        \"tags\": [\n          \"optional-tag1\",\n          \"tag2\"\n        ],\n        \"phones\": [\n          \"\u02c8\u00e6p.\u0259l\",\n          \"aapl\"\n        ],\n        \"notes\": \"Optional note\",\n        \"status\": \"enabled\",\n        \"relations\": [\n          {\n            \"guid\": \"61f76f4d-ee87-4efc-b2b2-845125585bcf\",\n            \"weight\": 0,\n            \"initial\": \"R\",\n            \"lang\": \"english\",\n            \"content\": \"round, red or yellow, edible fruit of a small tree\",\n            \"tokens\": \"\",\n            \"tags\": [],\n            \"phones\": [\n              \"\"\n            ],\n            \"notes\": \"\",\n            \"status\": \"enabled\",\n            \"created_at\": \"2022-06-26T08:33:34.842429Z\",\n            \"updated_at\": \"2022-06-26T08:33:34.842429Z\",\n            \"relation\": {\n              \"types\": [\n                \"noun\"\n              ],\n              \"tags\": [\n                \"\"\n              ],\n              \"notes\": \"\",\n              \"weight\": 0,\n              \"status\": \"enabled\",\n              \"created_at\": \"2022-06-26T08:33:34.844822Z\",\n              \"updated_at\": \"2022-06-26T08:33:34.844822Z\"\n            }\n          },\n          {\n            \"guid\": \"72ee1c06-d3fc-4b5e-8fa7-ad868c12475d\",\n            \"weight\": 1,\n            \"initial\": \"T\",\n            \"lang\": \"english\",\n            \"content\": \"the tree, cultivated in most temperate regions.\",\n            \"tokens\": \"\",\n            \"tags\": [],\n            \"phones\": [\n              \"\"\n            ],\n            \"notes\": \"\",\n            \"status\": \"enabled\",\n            \"created_at\": \"2022-06-26T08:33:34.842429Z\",\n            \"updated_at\": \"2022-06-26T08:33:34.842429Z\",\n            \"relation\": {\n              \"types\": [\n                \"noun\"\n              ],\n              \"tags\": [\n                \"\"\n              ],\n              \"notes\": \"\",\n              \"weight\": 1,\n              \"status\": \"enabled\",\n              \"created_at\": \"2022-06-26T08:33:34.844822Z\",\n              \"updated_at\": \"2022-06-26T08:33:34.844822Z\"\n            }\n          },\n          {\n            \"guid\": \"653fc521-f917-4049-99fc-5281b3e2e300\",\n            \"weight\": 2,\n            \"initial\": \"I\",\n            \"lang\": \"italian\",\n            \"content\": \"il pomo.\",\n            \"tokens\": \"\",\n            \"tags\": [],\n            \"phones\": [\n              \"\"\n            ],\n            \"notes\": \"\",\n            \"status\": \"enabled\",\n            \"created_at\": \"2022-06-26T08:33:34.842429Z\",\n            \"updated_at\": \"2022-06-26T08:33:34.842429Z\",\n            \"relation\": {\n              \"types\": [\n                \"noun\"\n              ],\n              \"tags\": [\n                \"\"\n              ],\n              \"notes\": \"\",\n              \"weight\": 2,\n              \"status\": \"enabled\",\n              \"created_at\": \"2022-06-26T08:33:34.844822Z\",\n              \"updated_at\": \"2022-06-26T08:33:34.844822Z\"\n            }\n          }\n        ],\n        \"created_at\": \"2022-06-26T08:33:34.83976Z\",\n        \"updated_at\": \"2022-06-26T08:33:34.83976Z\"\n      }\n    ],\n    \"page\": 1,\n    \"per_page\": 10,\n    \"total_pages\": 0,\n    \"total\": 1\n  }\n}\n</code></pre>"},{"location":"api/search/#query-params","title":"Query params","text":"Param Type <code>type</code> <code>string</code> Filter results by the given type. eg: <code>noun</code>. <code>tag</code> <code>string</code> Filter results by the given tag. eg: <code>my-tag</code>. <code>per_page</code> <code>int</code> Number of results to return per page (query) <code>page</code> <code>int</code> Page number for paginated results."},{"location":"api/submissions/","title":"Public submissions","text":"<p>The submissions API is available unauthenticated, publicly, to accept new submissions from the public. These submissions go sit in the admin moderation queue for approva. Public submissions can be enabled or disabled in the config. </p>"},{"location":"api/submissions/#post-apisubmissions","title":"POST /api/submissions","text":"<p>Accept a public entry + definition submission and add to the admin moderation queue. Entries created via this have <code>pending</code> status in the entries table.</p>"},{"location":"api/submissions/#request","title":"Request","text":"<pre><code>curl -u username:password 'http://localhost:9000/api/submissions' -X POST \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    --data-binary @- &lt;&lt; EOF\n    {\n        \"entry_lang\": \"english\",\n        \"entry_content\": \"Apple\",\n        \"entry_phones\": [\"aapl\"],\n        \"entry_notes\": \"Optional notes\",\n        \"relation_lang\": \"italian\",\n        \"relation_content\": \"il pomo\"\n        \"relation_type\": \"noun\"\n    }\nEOF\n</code></pre> <p>Response <pre><code>{\n  \"data\": true\n}\n</code></pre></p>"},{"location":"api/submissions/#params","title":"Params","text":"Param Type <code>entry_content</code> <code>string</code> The main entry content (word or phrase). <code>entry_lang</code> <code>string</code> Language of the main entry as defined in the config. <code>entry_phones</code> <code>string</code> Optional phonetic notations representing the pronunciations of the main entry. <code>entry_notes</code> <code>string</code> Optional notes describing the main entry. <code>relation_content</code> <code>string</code> The definition content (word or phrase). <code>relation_lang</code> <code>string</code> Language of the definition entry as defined in the config. <code>relation_notes</code> <code>string</code> Optional notes describing the definition entry."},{"location":"api/submissions/#post-apicomments","title":"POST /api/comments","text":"<p>Accept a public comment or suggestion on a relation (definition). The comment shows up in the admin moderation queue where the admin can choose to make a change based on the comment or discard it.</p>"},{"location":"api/submissions/#request_1","title":"Request","text":"<pre><code>curl -u username:password 'http://localhost:9000/api/submissions/comments' -X POST \\\n    -H 'Content-Type: application/json; charset=utf-8' \\\n    --data-binary @- &lt;&lt; EOF\n    {\n        \"from_guid\": \"17e7a544-5b55-4c6c-8cfc-8fbe2f5ea747\",\n        \"to_guid\": \"61f76f4d-ee87-4efc-b2b2-845125585bcf\",\n        \"comments\": \"This definition seems to be incorrect.\"\n    }\nEOF\n</code></pre> <p>Response <pre><code>{\n  \"data\": true\n}\n</code></pre></p>"},{"location":"api/submissions/#params_1","title":"Params","text":"Param Type <code>from_guid</code> <code>string</code> The <code>guid</code> of the main entry. Numerical IDs are not exposed in the public. <code>to_guid</code> <code>string</code> The <code>guid</code> of the definition entry. Numerical IDs are not exposed in the public. <code>comments</code> <code>string</code> Comments."}]}